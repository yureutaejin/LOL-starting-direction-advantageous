subject1
subject1[1]
subject1$name
subject1[2]
subject1$temperature
# dataframe_basic
pt_data <-data.frame(name, temperature, flu_status, gender, blood)
pt_data
pt_data$name
pt_data[1, 2]
pt_data[c(1, 3), c(2, 4)]
pt_data[,1]
pt_data[1,1]
pt_data[-2, -3]
# matrix_and_array_basic
m <- matrix(c('a', 'b', 'c', 'd', 'e', 'f'), nrow=2)
m
m <- matrix(c('a', 'b', 'c', 'd', 'e', 'f'), ncol=2)
m
# basic_data_analysis
## data import
usedcars <- read.csv("/Users/jinyuntae/Desktop/programming/industrial_statistics_R/data/usedcars.csv", stringsAsFactors = FALSE)
usedcars
## 요약
str(usedcars) # .info()
summary(usedcars) # .describe()
summary(usedcars$model)
summary(usedcars[c("price", 'mileage')])
## basic_statistics
mean(usedcars$price)
var(usedcars$price)
sd(usedcars$price)
median(usedcars$price)
summary(usedcars$price)
range(usedcars$price) # min max
diff(range(usedcars$price)) # 차이 출력
IQR(usedcars$price)
quantile(usedcars$price)
quantile(usedcars$price, probs=c(0.05, 0.80, 0.85, 0.98))
quantile(usedcars$price, seq(from=0, to=1, by=0.1))
## graph_visualization
### boxplot
boxplot(usedcars$price)
boxplot(usedcars$mileage)
### hist
hist(usedcars$mileage, main="mileage_hist", xlab= "mileage")
### scatterplot
plot(usedcars$mileage, usedcars$price)
plot(usedcars$mileage, usedcars$price, main = "Scatterplot",
xlab = "mileage", ylab = "price")
## categorical variable
table(usedcars$model)
usedcars$model <- factor(usedcars$model)
usedcars$color <- factor(usedcars$color)
usedcars$transmission <- factor(usedcars$transmission)
str(usedcars)
color_table <- prop.table(table(usedcars$color))
round(color_table)
round(color_table, digits = 1)
round(color_table, digits = 2)
round(color_table, digits = 4)
CrossTable(usedcars$model, usedcars$color)
usedcars$conservative <- usedcars$color %in% c("Black", "Gray",
"Silver", "White")
str(usedcars)
CrossTable(usedcars$model, usedcars$conservative)
CrossTable(usedcars$model, usedcars$conservative, chisq=TRUE)
# vector_basic
name <- c("John", "Jane", "Steve")
temperature <- c(98.1, 98.6, 101.4)
flu_status <- c(FALSE,FALSE,TRUE)
name[2]
name[2:3]
name[1:2]
name[c(TRUE,TRUE,FALSE)]
gender <- c("MALE", "FEMALE", "MALE")
# factor_basic
gender <- factor(c("MALE", "FEMALE", "MALE"))
gender
blood <- factor(c("O", "AB", "A"), levels=c("A", "B", "O", "AB"))
blood
# list_basic
subject1 <- list(name = name[1], temperature = temperature[1], flu_status = flu_status[1])
subject1
subject1[1]
subject1$name
subject1[2]
subject1$temperature
# dataframe_basic
pt_data <-data.frame(name, temperature, flu_status, gender, blood)
pt_data
pt_data$name
pt_data[1, 2]
pt_data[c(1, 3), c(2, 4)]
pt_data[,1]
pt_data[1,1]
pt_data[-2, -3]
# matrix_and_array_basic
m <- matrix(c('a', 'b', 'c', 'd', 'e', 'f'), nrow=2)
m
m <- matrix(c('a', 'b', 'c', 'd', 'e', 'f'), ncol=2)
m
# basic_data_analysis
## data import
usedcars <- read.csv("/Users/jinyuntae/Desktop/programming/industrial_statistics_R/data/usedcars.csv", stringsAsFactors = FALSE)
usedcars
## 요약
str(usedcars) # .info()
summary(usedcars) # .describe()
summary(usedcars$model)
summary(usedcars[c("price", 'mileage')])
## basic_statistics
mean(usedcars$price)
var(usedcars$price)
sd(usedcars$price)
median(usedcars$price)
summary(usedcars$price)
range(usedcars$price) # min max
diff(range(usedcars$price)) # 차이 출력
IQR(usedcars$price)
quantile(usedcars$price)
quantile(usedcars$price, probs=c(0.05, 0.80, 0.85, 0.98))
quantile(usedcars$price, seq(from=0, to=1, by=0.1))
## graph_visualization
### boxplot
boxplot(usedcars$price)
boxplot(usedcars$mileage)
### hist
hist(usedcars$mileage, main="mileage_hist", xlab= "mileage")
### scatterplot
plot(usedcars$mileage, usedcars$price)
plot(usedcars$mileage, usedcars$price, main = "Scatterplot",
xlab = "mileage", ylab = "price")
## categorical variable
table(usedcars$model)
usedcars$model <- factor(usedcars$model)
usedcars$color <- factor(usedcars$color)
usedcars$transmission <- factor(usedcars$transmission)
str(usedcars)
color_table <- prop.table(table(usedcars$color))
round(color_table)
round(color_table, digits = 1)
round(color_table, digits = 2)
round(color_table, digits = 4)
## crosstable
library(gmodels)
CrossTable(usedcars$model, usedcars$color)
# same with df['conservative] = df['color'].map(color_dictionary or color_to_numeric_func)
usedcars$conservative <- usedcars$color %in% c("Black", "Gray",
"Silver", "White")
str(usedcars)
CrossTable(usedcars$model, usedcars$conservative)
CrossTable(usedcars$model, usedcars$conservative, chisq=TRUE)
summary(blue_reduced_model)
# 변수 선택법
blue_reduced_model=step(reg_blue_result, direction = "forward")
# setting directory
setwd('/Users/jinyuntae/Desktop/Team_project/industrial_statistics_university_project')
df = read.csv('data/Challenger_Ranked_Games.csv', header = T)
df = data.frame(df)
df
# select sample of df
temp_sample_num = sample(nrow(df), 150)
temp_sample_num
sample_df = df[temp_sample_num,]
sample_df
# separate blue and red team
blue_sample = sample_df[c('gameId', 'gameDuraton', 'blueWins', 'blueFirstBlood', 'blueFirstTower', 'blueFirstBaron', 'blueFirstDragon', 'blueFirstInhibitor', 'blueDragonKills', 'blueBaronKills', 'blueTowerKills', 'blueInhibitorKills', 'blueWardPlaced', 'blueWardkills', 'blueKills', 'blueDeath', 'blueAssist', 'blueChampionDamageDealt', 'blueTotalGold', 'blueTotalMinionKills', 'blueTotalLevel', 'blueAvgLevel', 'blueJungleMinionKills', 'blueKillingSpree', 'blueTotalHeal', 'blueObjectDamageDealt')]
red_sample = sample_df[c('gameId', 'gameDuraton', 'redWins', 'redFirstBlood', 'redFirstTower', 'redFirstBaron', 'redFirstDragon', 'redFirstInhibitor', 'redDragonKills', 'redBaronKills', 'redTowerKills', 'redInhibitorKills', 'redWardPlaced', 'redWardkills', 'redKills', 'redDeath', 'redAssist', 'redChampionDamageDealt', 'redTotalGold', 'redTotalMinionKills', 'redTotalLevel', 'redAvgLevel', 'redJungleMinionKills', 'redKillingSpree', 'redTotalHeal', 'redObjectDamageDealt')]
blue_sample
red_sample
# correlation
cor(blue_sample)['blueWins',]
cor(red_sample)['redWins',]
# analysis 1-1 => logistic regression (categorical and numeric value)
reg_blue_result <- glm(blueWins ~ blueFirstBlood+blueFirstTower+blueFirstInhibitor+blueFirstDragon+blueFirstBaron+blueFirstInhibitor+blueDragonKills+blueBaronKills+blueTowerKills+blueInhibitorKills, data=blue_sample, family = "binomial")
summary(reg_blue_result) #except gameDuraton
reg_red_result <- glm(redWins ~ redFirstBlood+redFirstTower+redFirstInhibitor+redFirstDragon+redFirstBaron+redFirstInhibitor+redDragonKills+redBaronKills+redTowerKills+redInhibitorKills, data=red_sample, family = "binomial")
summary(reg_red_result) # except gameDuraton
# 변수 선택법
blue_reduced_model=step(reg_blue_result, direction = "forward")
summary(blue_reduced_model)
red_reduced_model = step(reg_red_result, direction = "forward")
summary(red_reduced_model)
# setting directory
setwd('/Users/jinyuntae/Desktop/Team_project/industrial_statistics_university_project')
df = read.csv('data/Challenger_Ranked_Games.csv', header = T)
df = data.frame(df)
df
# select sample of df
temp_sample_num = sample(nrow(df), 1000)
temp_sample_num
sample_df = df[temp_sample_num,]
sample_df
# separate blue and red team
blue_sample = sample_df[c('gameId', 'gameDuraton', 'blueWins', 'blueFirstBlood', 'blueFirstTower', 'blueFirstBaron', 'blueFirstDragon', 'blueFirstInhibitor', 'blueDragonKills', 'blueBaronKills', 'blueTowerKills', 'blueInhibitorKills', 'blueWardPlaced', 'blueWardkills', 'blueKills', 'blueDeath', 'blueAssist', 'blueChampionDamageDealt', 'blueTotalGold', 'blueTotalMinionKills', 'blueTotalLevel', 'blueAvgLevel', 'blueJungleMinionKills', 'blueKillingSpree', 'blueTotalHeal', 'blueObjectDamageDealt')]
red_sample = sample_df[c('gameId', 'gameDuraton', 'redWins', 'redFirstBlood', 'redFirstTower', 'redFirstBaron', 'redFirstDragon', 'redFirstInhibitor', 'redDragonKills', 'redBaronKills', 'redTowerKills', 'redInhibitorKills', 'redWardPlaced', 'redWardkills', 'redKills', 'redDeath', 'redAssist', 'redChampionDamageDealt', 'redTotalGold', 'redTotalMinionKills', 'redTotalLevel', 'redAvgLevel', 'redJungleMinionKills', 'redKillingSpree', 'redTotalHeal', 'redObjectDamageDealt')]
blue_sample
red_sample
# correlation
cor(blue_sample)['blueWins',]
cor(red_sample)['redWins',]
# analysis 1-1 => logistic regression (categorical and numeric value)
reg_blue_result <- glm(blueWins ~ blueFirstBlood+blueFirstTower+blueFirstInhibitor+blueFirstDragon+blueFirstBaron+blueFirstInhibitor+blueDragonKills+blueBaronKills+blueTowerKills+blueInhibitorKills, data=blue_sample, family = "binomial")
summary(reg_blue_result) #except gameDuraton
reg_red_result <- glm(redWins ~ redFirstBlood+redFirstTower+redFirstInhibitor+redFirstDragon+redFirstBaron+redFirstInhibitor+redDragonKills+redBaronKills+redTowerKills+redInhibitorKills, data=red_sample, family = "binomial")
summary(reg_red_result) # except gameDuraton
# 변수 선택법
blue_reduced_model=step(reg_blue_result, direction = "forward")
summary(blue_reduced_model)
red_reduced_model = step(reg_red_result, direction = "forward")
summary(red_reduced_model)
# setting directory
setwd('/Users/jinyuntae/Desktop/Team_project/industrial_statistics_university_project')
df = read.csv('data/Challenger_Ranked_Games.csv', header = T)
df = data.frame(df)
df
# select sample of df
temp_sample_num = sample(nrow(df), 1000)
temp_sample_num
sample_df = df[temp_sample_num,]
sample_df
# separate blue and red team
blue_sample = sample_df[c('gameId', 'gameDuraton', 'blueWins', 'blueFirstBlood', 'blueFirstTower', 'blueFirstBaron', 'blueFirstDragon', 'blueFirstInhibitor', 'blueDragonKills', 'blueBaronKills', 'blueTowerKills', 'blueInhibitorKills', 'blueWardPlaced', 'blueWardkills', 'blueKills', 'blueDeath', 'blueAssist', 'blueChampionDamageDealt', 'blueTotalGold', 'blueTotalMinionKills', 'blueTotalLevel', 'blueAvgLevel', 'blueJungleMinionKills', 'blueKillingSpree', 'blueTotalHeal', 'blueObjectDamageDealt')]
red_sample = sample_df[c('gameId', 'gameDuraton', 'redWins', 'redFirstBlood', 'redFirstTower', 'redFirstBaron', 'redFirstDragon', 'redFirstInhibitor', 'redDragonKills', 'redBaronKills', 'redTowerKills', 'redInhibitorKills', 'redWardPlaced', 'redWardkills', 'redKills', 'redDeath', 'redAssist', 'redChampionDamageDealt', 'redTotalGold', 'redTotalMinionKills', 'redTotalLevel', 'redAvgLevel', 'redJungleMinionKills', 'redKillingSpree', 'redTotalHeal', 'redObjectDamageDealt')]
blue_sample
red_sample
# analysis 1-1 => logistic regression (categorical and numeric value)
reg_blue_result <- glm(blueWins ~ blueFirstBlood+blueFirstTower+blueFirstInhibitor+blueFirstDragon+blueFirstBaron+blueFirstInhibitor+blueDragonKills+blueBaronKills+blueTowerKills+blueInhibitorKills, data=blue_sample, family = "binomial")
summary(reg_blue_result) #except gameDuraton
reg_red_result <- glm(redWins ~ redFirstBlood+redFirstTower+redFirstInhibitor+redFirstDragon+redFirstBaron+redFirstInhibitor+redDragonKills+redBaronKills+redTowerKills+redInhibitorKills, data=red_sample, family = "binomial")
summary(reg_red_result) # except gameDuraton
# 변수 선택법
blue_reduced_model=step(reg_blue_result, direction = "forward")
summary(blue_reduced_model)
red_reduced_model = step(reg_red_result, direction = "forward")
summary(red_reduced_model)
# setting directory
setwd('/Users/jinyuntae/Desktop/Team_project/industrial_statistics_university_project')
df = read.csv('data/Challenger_Ranked_Games.csv', header = T)
df = data.frame(df)
df
# select sample of df
temp_sample_num = sample(nrow(df), 1000)
temp_sample_num
sample_df = df[temp_sample_num,]
sample_df
# separate blue and red team
blue_sample = sample_df[c('gameId', 'gameDuraton', 'blueWins', 'blueFirstBlood', 'blueFirstTower', 'blueFirstBaron', 'blueFirstDragon', 'blueFirstInhibitor', 'blueDragonKills', 'blueBaronKills', 'blueTowerKills', 'blueInhibitorKills', 'blueWardPlaced', 'blueWardkills', 'blueKills', 'blueDeath', 'blueAssist', 'blueChampionDamageDealt', 'blueTotalGold', 'blueTotalMinionKills', 'blueTotalLevel', 'blueAvgLevel', 'blueJungleMinionKills', 'blueKillingSpree', 'blueTotalHeal', 'blueObjectDamageDealt')]
red_sample = sample_df[c('gameId', 'gameDuraton', 'redWins', 'redFirstBlood', 'redFirstTower', 'redFirstBaron', 'redFirstDragon', 'redFirstInhibitor', 'redDragonKills', 'redBaronKills', 'redTowerKills', 'redInhibitorKills', 'redWardPlaced', 'redWardkills', 'redKills', 'redDeath', 'redAssist', 'redChampionDamageDealt', 'redTotalGold', 'redTotalMinionKills', 'redTotalLevel', 'redAvgLevel', 'redJungleMinionKills', 'redKillingSpree', 'redTotalHeal', 'redObjectDamageDealt')]
blue_sample
red_sample
# analysis 1-1 => logistic regression (categorical and numeric value)
reg_blue_result <- glm(blueWins ~ blueFirstBlood+blueFirstTower+blueFirstInhibitor+blueFirstDragon+blueFirstBaron+blueFirstInhibitor+blueDragonKills+blueBaronKills+blueTowerKills+blueInhibitorKills, data=blue_sample, family = "binomial")
summary(reg_blue_result) #except gameDuraton
reg_red_result <- glm(redWins ~ redFirstBlood+redFirstTower+redFirstInhibitor+redFirstDragon+redFirstBaron+redFirstInhibitor+redDragonKills+redBaronKills+redTowerKills+redInhibitorKills, data=red_sample, family = "binomial")
summary(reg_red_result) # except gameDuraton
# 변수 선택법
blue_reduced_model=step(reg_blue_result, direction = "forward")
summary(blue_reduced_model)
red_reduced_model = step(reg_red_result, direction = "forward")
summary(red_reduced_model)
# setting directory
setwd('/Users/jinyuntae/Desktop/Team_project/industrial_statistics_university_project')
df = read.csv('data/Challenger_Ranked_Games.csv', header = T)
df = data.frame(df)
df
# select sample of df
temp_sample_num = sample(nrow(df), 1000)
temp_sample_num
sample_df = df[temp_sample_num,]
sample_df
# separate blue and red team
blue_sample = sample_df[c('gameId', 'gameDuraton', 'blueWins', 'blueFirstBlood', 'blueFirstTower', 'blueFirstBaron', 'blueFirstDragon', 'blueFirstInhibitor', 'blueDragonKills', 'blueBaronKills', 'blueTowerKills', 'blueInhibitorKills', 'blueWardPlaced', 'blueWardkills', 'blueKills', 'blueDeath', 'blueAssist', 'blueChampionDamageDealt', 'blueTotalGold', 'blueTotalMinionKills', 'blueTotalLevel', 'blueAvgLevel', 'blueJungleMinionKills', 'blueKillingSpree', 'blueTotalHeal', 'blueObjectDamageDealt')]
red_sample = sample_df[c('gameId', 'gameDuraton', 'redWins', 'redFirstBlood', 'redFirstTower', 'redFirstBaron', 'redFirstDragon', 'redFirstInhibitor', 'redDragonKills', 'redBaronKills', 'redTowerKills', 'redInhibitorKills', 'redWardPlaced', 'redWardkills', 'redKills', 'redDeath', 'redAssist', 'redChampionDamageDealt', 'redTotalGold', 'redTotalMinionKills', 'redTotalLevel', 'redAvgLevel', 'redJungleMinionKills', 'redKillingSpree', 'redTotalHeal', 'redObjectDamageDealt')]
blue_sample
red_sample
# analysis 1-1 => logistic regression (categorical and numeric value)
reg_blue_result <- glm(blueWins ~ blueFirstBlood+blueFirstTower+blueFirstInhibitor+blueFirstDragon+blueFirstBaron+blueFirstInhibitor+blueDragonKills+blueBaronKills+blueTowerKills+blueInhibitorKills, data=blue_sample, family = "binomial")
summary(reg_blue_result) #except gameDuraton
reg_red_result <- glm(redWins ~ redFirstBlood+redFirstTower+redFirstInhibitor+redFirstDragon+redFirstBaron+redFirstInhibitor+redDragonKills+redBaronKills+redTowerKills+redInhibitorKills, data=red_sample, family = "binomial")
summary(reg_red_result) # except gameDuraton
# 변수 선택법
blue_reduced_model=step(reg_blue_result, direction = "forward")
red_reduced_model = step(reg_red_result, direction = "forward")
# setting directory
setwd('/Users/jinyuntae/Desktop/Team_project/industrial_statistics_university_project')
df = read.csv('data/Challenger_Ranked_Games.csv', header = T)
df = data.frame(df)
df
# select sample of df
temp_sample_num = sample(nrow(df), 1000)
temp_sample_num
sample_df = df[temp_sample_num,]
sample_df
# separate blue and red team
blue_sample = sample_df[c('gameId', 'gameDuraton', 'blueWins', 'blueFirstBlood', 'blueFirstTower', 'blueFirstBaron', 'blueFirstDragon', 'blueFirstInhibitor', 'blueDragonKills', 'blueBaronKills', 'blueTowerKills', 'blueInhibitorKills', 'blueWardPlaced', 'blueWardkills', 'blueKills', 'blueDeath', 'blueAssist', 'blueChampionDamageDealt', 'blueTotalGold', 'blueTotalMinionKills', 'blueTotalLevel', 'blueAvgLevel', 'blueJungleMinionKills', 'blueKillingSpree', 'blueTotalHeal', 'blueObjectDamageDealt')]
red_sample = sample_df[c('gameId', 'gameDuraton', 'redWins', 'redFirstBlood', 'redFirstTower', 'redFirstBaron', 'redFirstDragon', 'redFirstInhibitor', 'redDragonKills', 'redBaronKills', 'redTowerKills', 'redInhibitorKills', 'redWardPlaced', 'redWardkills', 'redKills', 'redDeath', 'redAssist', 'redChampionDamageDealt', 'redTotalGold', 'redTotalMinionKills', 'redTotalLevel', 'redAvgLevel', 'redJungleMinionKills', 'redKillingSpree', 'redTotalHeal', 'redObjectDamageDealt')]
blue_sample
red_sample
# analysis 1-1 => logistic regression (categorical and numeric value)
reg_blue_result <- glm(blueWins ~ blueFirstBlood+blueFirstTower+blueFirstInhibitor+blueFirstDragon+blueFirstBaron+blueFirstInhibitor+blueDragonKills+blueBaronKills+blueTowerKills+blueInhibitorKills, data=blue_sample, family = "binomial")
summary(reg_blue_result) #except gameDuraton
reg_red_result <- glm(redWins ~ redFirstBlood+redFirstTower+redFirstInhibitor+redFirstDragon+redFirstBaron+redFirstInhibitor+redDragonKills+redBaronKills+redTowerKills+redInhibitorKills, data=red_sample, family = "binomial")
summary(reg_red_result) # except gameDuraton
# 변수 선택법
blue_reduced_model=step(reg_blue_result, direction = "forward")
blue_reduced_model
red_reduced_model = step(reg_red_result, direction = "forward")
red_reduced_model
# setting directory
setwd('/Users/jinyuntae/Desktop/Team_project/industrial_statistics_university_project')
df = read.csv('data/Challenger_Ranked_Games.csv', header = T)
df = data.frame(df)
df
# select sample of df
temp_sample_num = sample(nrow(df), 500)
temp_sample_num
sample_df = df[temp_sample_num,]
sample_df
# separate blue and red team
blue_sample = sample_df[c('gameId', 'gameDuraton', 'blueWins', 'blueFirstBlood', 'blueFirstTower', 'blueFirstBaron', 'blueFirstDragon', 'blueFirstInhibitor', 'blueDragonKills', 'blueBaronKills', 'blueTowerKills', 'blueInhibitorKills', 'blueWardPlaced', 'blueWardkills', 'blueKills', 'blueDeath', 'blueAssist', 'blueChampionDamageDealt', 'blueTotalGold', 'blueTotalMinionKills', 'blueTotalLevel', 'blueAvgLevel', 'blueJungleMinionKills', 'blueKillingSpree', 'blueTotalHeal', 'blueObjectDamageDealt')]
red_sample = sample_df[c('gameId', 'gameDuraton', 'redWins', 'redFirstBlood', 'redFirstTower', 'redFirstBaron', 'redFirstDragon', 'redFirstInhibitor', 'redDragonKills', 'redBaronKills', 'redTowerKills', 'redInhibitorKills', 'redWardPlaced', 'redWardkills', 'redKills', 'redDeath', 'redAssist', 'redChampionDamageDealt', 'redTotalGold', 'redTotalMinionKills', 'redTotalLevel', 'redAvgLevel', 'redJungleMinionKills', 'redKillingSpree', 'redTotalHeal', 'redObjectDamageDealt')]
blue_sample
red_sample
# analysis 1-1 => logistic regression (categorical and numeric value)
reg_blue_result <- glm(blueWins ~ blueFirstBlood+blueFirstTower+blueFirstInhibitor+blueFirstDragon+blueFirstBaron+blueFirstInhibitor+blueDragonKills+blueBaronKills+blueTowerKills+blueInhibitorKills, data=blue_sample, family = "binomial")
summary(reg_blue_result) #except gameDuraton
reg_red_result <- glm(redWins ~ redFirstBlood+redFirstTower+redFirstInhibitor+redFirstDragon+redFirstBaron+redFirstInhibitor+redDragonKills+redBaronKills+redTowerKills+redInhibitorKills, data=red_sample, family = "binomial")
summary(reg_red_result) # except gameDuraton
# 변수 선택법
blue_reduced_model=step(reg_blue_result, direction = "forward")
blue_reduced_model
red_reduced_model = step(reg_red_result, direction = "forward")
red_reduced_model
# setting directory
setwd('/Users/jinyuntae/Desktop/Team_project/industrial_statistics_university_project')
df = read.csv('data/Challenger_Ranked_Games.csv', header = T)
df = data.frame(df)
df
# select sample of df
temp_sample_num = sample(nrow(df), 150)
temp_sample_num
sample_df = df[temp_sample_num,]
sample_df
# separate blue and red team
blue_sample = sample_df[c('gameId', 'gameDuraton', 'blueWins', 'blueFirstBlood', 'blueFirstTower', 'blueFirstBaron', 'blueFirstDragon', 'blueFirstInhibitor', 'blueDragonKills', 'blueBaronKills', 'blueTowerKills', 'blueInhibitorKills', 'blueWardPlaced', 'blueWardkills', 'blueKills', 'blueDeath', 'blueAssist', 'blueChampionDamageDealt', 'blueTotalGold', 'blueTotalMinionKills', 'blueTotalLevel', 'blueAvgLevel', 'blueJungleMinionKills', 'blueKillingSpree', 'blueTotalHeal', 'blueObjectDamageDealt')]
red_sample = sample_df[c('gameId', 'gameDuraton', 'redWins', 'redFirstBlood', 'redFirstTower', 'redFirstBaron', 'redFirstDragon', 'redFirstInhibitor', 'redDragonKills', 'redBaronKills', 'redTowerKills', 'redInhibitorKills', 'redWardPlaced', 'redWardkills', 'redKills', 'redDeath', 'redAssist', 'redChampionDamageDealt', 'redTotalGold', 'redTotalMinionKills', 'redTotalLevel', 'redAvgLevel', 'redJungleMinionKills', 'redKillingSpree', 'redTotalHeal', 'redObjectDamageDealt')]
blue_sample
red_sample
# analysis 1-1 => logistic regression (categorical and numeric value)
reg_blue_result <- glm(blueWins ~ blueFirstBlood+blueFirstTower+blueFirstInhibitor+blueFirstDragon+blueFirstBaron+blueFirstInhibitor+blueDragonKills+blueBaronKills+blueTowerKills+blueInhibitorKills, data=blue_sample, family = "binomial")
summary(reg_blue_result) #except gameDuraton
reg_red_result <- glm(redWins ~ redFirstBlood+redFirstTower+redFirstInhibitor+redFirstDragon+redFirstBaron+redFirstInhibitor+redDragonKills+redBaronKills+redTowerKills+redInhibitorKills, data=red_sample, family = "binomial")
summary(reg_red_result) # except gameDuraton
# 변수 선택법
blue_reduced_model=step(reg_blue_result, direction = "forward")
blue_reduced_model
red_reduced_model = step(reg_red_result, direction = "forward")
red_reduced_model
# setting directory
setwd('/Users/jinyuntae/Desktop/Team_project/industrial_statistics_university_project')
df = read.csv('data/Challenger_Ranked_Games.csv', header = T)
df = data.frame(df)
df
# select sample of df
temp_sample_num = sample(nrow(df), 50)
temp_sample_num
sample_df = df[temp_sample_num,]
sample_df
# separate blue and red team
blue_sample = sample_df[c('gameId', 'gameDuraton', 'blueWins', 'blueFirstBlood', 'blueFirstTower', 'blueFirstBaron', 'blueFirstDragon', 'blueFirstInhibitor', 'blueDragonKills', 'blueBaronKills', 'blueTowerKills', 'blueInhibitorKills', 'blueWardPlaced', 'blueWardkills', 'blueKills', 'blueDeath', 'blueAssist', 'blueChampionDamageDealt', 'blueTotalGold', 'blueTotalMinionKills', 'blueTotalLevel', 'blueAvgLevel', 'blueJungleMinionKills', 'blueKillingSpree', 'blueTotalHeal', 'blueObjectDamageDealt')]
red_sample = sample_df[c('gameId', 'gameDuraton', 'redWins', 'redFirstBlood', 'redFirstTower', 'redFirstBaron', 'redFirstDragon', 'redFirstInhibitor', 'redDragonKills', 'redBaronKills', 'redTowerKills', 'redInhibitorKills', 'redWardPlaced', 'redWardkills', 'redKills', 'redDeath', 'redAssist', 'redChampionDamageDealt', 'redTotalGold', 'redTotalMinionKills', 'redTotalLevel', 'redAvgLevel', 'redJungleMinionKills', 'redKillingSpree', 'redTotalHeal', 'redObjectDamageDealt')]
blue_sample
red_sample
# analysis 1-1 => logistic regression (categorical and numeric value)
reg_blue_result <- glm(blueWins ~ blueFirstBlood+blueFirstTower+blueFirstInhibitor+blueFirstDragon+blueFirstBaron+blueFirstInhibitor+blueDragonKills+blueBaronKills+blueTowerKills+blueInhibitorKills, data=blue_sample, family = "binomial")
summary(reg_blue_result) #except gameDuraton
reg_red_result <- glm(redWins ~ redFirstBlood+redFirstTower+redFirstInhibitor+redFirstDragon+redFirstBaron+redFirstInhibitor+redDragonKills+redBaronKills+redTowerKills+redInhibitorKills, data=red_sample, family = "binomial")
summary(reg_red_result) # except gameDuraton
# 변수 선택법
blue_reduced_model=step(reg_blue_result, direction = "forward")
blue_reduced_model
red_reduced_model = step(reg_red_result, direction = "forward")
red_reduced_model
# setting directory
setwd('/Users/jinyuntae/Desktop/Team_project/industrial_statistics_university_project')
df = read.csv('data/Challenger_Ranked_Games.csv', header = T)
df = data.frame(df)
df
# select sample of df
temp_sample_num = sample(nrow(df), 500)
temp_sample_num
sample_df = df[temp_sample_num,]
sample_df
# separate blue and red team
blue_sample = sample_df[c('gameId', 'gameDuraton', 'blueWins', 'blueFirstBlood', 'blueFirstTower', 'blueFirstBaron', 'blueFirstDragon', 'blueFirstInhibitor', 'blueDragonKills', 'blueBaronKills', 'blueTowerKills', 'blueInhibitorKills', 'blueWardPlaced', 'blueWardkills', 'blueKills', 'blueDeath', 'blueAssist', 'blueChampionDamageDealt', 'blueTotalGold', 'blueTotalMinionKills', 'blueTotalLevel', 'blueAvgLevel', 'blueJungleMinionKills', 'blueKillingSpree', 'blueTotalHeal', 'blueObjectDamageDealt')]
red_sample = sample_df[c('gameId', 'gameDuraton', 'redWins', 'redFirstBlood', 'redFirstTower', 'redFirstBaron', 'redFirstDragon', 'redFirstInhibitor', 'redDragonKills', 'redBaronKills', 'redTowerKills', 'redInhibitorKills', 'redWardPlaced', 'redWardkills', 'redKills', 'redDeath', 'redAssist', 'redChampionDamageDealt', 'redTotalGold', 'redTotalMinionKills', 'redTotalLevel', 'redAvgLevel', 'redJungleMinionKills', 'redKillingSpree', 'redTotalHeal', 'redObjectDamageDealt')]
blue_sample
red_sample
# analysis 1-1 => logistic regression (categorical and numeric value)
reg_blue_result <- glm(blueWins ~ blueFirstBlood+blueFirstTower+blueFirstInhibitor+blueFirstDragon+blueFirstBaron+blueFirstInhibitor+blueDragonKills+blueBaronKills+blueTowerKills+blueInhibitorKills, data=blue_sample, family = "binomial")
summary(reg_blue_result) #except gameDuraton
reg_red_result <- glm(redWins ~ redFirstBlood+redFirstTower+redFirstInhibitor+redFirstDragon+redFirstBaron+redFirstInhibitor+redDragonKills+redBaronKills+redTowerKills+redInhibitorKills, data=red_sample, family = "binomial")
summary(reg_red_result) # except gameDuraton
# setting directory
setwd('/Users/jinyuntae/Desktop/Team_project/industrial_statistics_university_project')
df = read.csv('data/Challenger_Ranked_Games.csv', header = T)
df = data.frame(df)
df
# select sample of df
temp_sample_num = sample(nrow(df), 1000)
temp_sample_num
sample_df = df[temp_sample_num,]
sample_df
# separate blue and red team
blue_sample = sample_df[c('gameId', 'gameDuraton', 'blueWins', 'blueFirstBlood', 'blueFirstTower', 'blueFirstBaron', 'blueFirstDragon', 'blueFirstInhibitor', 'blueDragonKills', 'blueBaronKills', 'blueTowerKills', 'blueInhibitorKills', 'blueWardPlaced', 'blueWardkills', 'blueKills', 'blueDeath', 'blueAssist', 'blueChampionDamageDealt', 'blueTotalGold', 'blueTotalMinionKills', 'blueTotalLevel', 'blueAvgLevel', 'blueJungleMinionKills', 'blueKillingSpree', 'blueTotalHeal', 'blueObjectDamageDealt')]
red_sample = sample_df[c('gameId', 'gameDuraton', 'redWins', 'redFirstBlood', 'redFirstTower', 'redFirstBaron', 'redFirstDragon', 'redFirstInhibitor', 'redDragonKills', 'redBaronKills', 'redTowerKills', 'redInhibitorKills', 'redWardPlaced', 'redWardkills', 'redKills', 'redDeath', 'redAssist', 'redChampionDamageDealt', 'redTotalGold', 'redTotalMinionKills', 'redTotalLevel', 'redAvgLevel', 'redJungleMinionKills', 'redKillingSpree', 'redTotalHeal', 'redObjectDamageDealt')]
blue_sample
red_sample
# analysis 1-1 => logistic regression (categorical and numeric value)
reg_blue_result <- glm(blueWins ~ blueFirstBlood+blueFirstTower+blueFirstInhibitor+blueFirstDragon+blueFirstBaron+blueFirstInhibitor+blueDragonKills+blueBaronKills+blueTowerKills+blueInhibitorKills, data=blue_sample, family = "binomial")
summary(reg_blue_result) #except gameDuraton
reg_red_result <- glm(redWins ~ redFirstBlood+redFirstTower+redFirstInhibitor+redFirstDragon+redFirstBaron+redFirstInhibitor+redDragonKills+redBaronKills+redTowerKills+redInhibitorKills, data=red_sample, family = "binomial")
summary(reg_red_result) # except gameDuraton
# setting directory
setwd('/Users/jinyuntae/Desktop/Team_project/industrial_statistics_university_project')
df = read.csv('data/Challenger_Ranked_Games.csv', header = T)
df = data.frame(df)
df
# select sample of df
temp_sample_num = sample(nrow(df), 400)
temp_sample_num
sample_df = df[temp_sample_num,]
sample_df
# separate blue and red team
blue_sample = sample_df[c('gameId', 'gameDuraton', 'blueWins', 'blueFirstBlood', 'blueFirstTower', 'blueFirstBaron', 'blueFirstDragon', 'blueFirstInhibitor', 'blueDragonKills', 'blueBaronKills', 'blueTowerKills', 'blueInhibitorKills', 'blueWardPlaced', 'blueWardkills', 'blueKills', 'blueDeath', 'blueAssist', 'blueChampionDamageDealt', 'blueTotalGold', 'blueTotalMinionKills', 'blueTotalLevel', 'blueAvgLevel', 'blueJungleMinionKills', 'blueKillingSpree', 'blueTotalHeal', 'blueObjectDamageDealt')]
red_sample = sample_df[c('gameId', 'gameDuraton', 'redWins', 'redFirstBlood', 'redFirstTower', 'redFirstBaron', 'redFirstDragon', 'redFirstInhibitor', 'redDragonKills', 'redBaronKills', 'redTowerKills', 'redInhibitorKills', 'redWardPlaced', 'redWardkills', 'redKills', 'redDeath', 'redAssist', 'redChampionDamageDealt', 'redTotalGold', 'redTotalMinionKills', 'redTotalLevel', 'redAvgLevel', 'redJungleMinionKills', 'redKillingSpree', 'redTotalHeal', 'redObjectDamageDealt')]
blue_sample
red_sample
# analysis 1-1 => logistic regression (categorical and numeric value)
reg_blue_result <- glm(blueWins ~ blueFirstBlood+blueFirstTower+blueFirstInhibitor+blueFirstDragon+blueFirstBaron+blueFirstInhibitor+blueDragonKills+blueBaronKills+blueTowerKills+blueInhibitorKills, data=blue_sample, family = "binomial")
summary(reg_blue_result) #except gameDuraton
reg_red_result <- glm(redWins ~ redFirstBlood+redFirstTower+redFirstInhibitor+redFirstDragon+redFirstBaron+redFirstInhibitor+redDragonKills+redBaronKills+redTowerKills+redInhibitorKills, data=red_sample, family = "binomial")
summary(reg_red_result) # except gameDuraton
step(reg_blue_result, direction = "backward")
# setting directory
setwd('/Users/jinyuntae/Desktop/Team_project/industrial_statistics_university_project')
df = read.csv('data/Challenger_Ranked_Games.csv', header = T)
df = data.frame(df)
df
# select sample of df
temp_sample_num = sample(nrow(df), 400)
temp_sample_num
sample_df = df[temp_sample_num,]
sample_df
# separate blue and red team
blue_sample = sample_df[c('gameId', 'gameDuraton', 'blueWins', 'blueFirstBlood', 'blueFirstTower', 'blueFirstBaron', 'blueFirstDragon', 'blueFirstInhibitor', 'blueDragonKills', 'blueBaronKills', 'blueTowerKills', 'blueInhibitorKills', 'blueWardPlaced', 'blueWardkills', 'blueKills', 'blueDeath', 'blueAssist', 'blueChampionDamageDealt', 'blueTotalGold', 'blueTotalMinionKills', 'blueTotalLevel', 'blueAvgLevel', 'blueJungleMinionKills', 'blueKillingSpree', 'blueTotalHeal', 'blueObjectDamageDealt')]
red_sample = sample_df[c('gameId', 'gameDuraton', 'redWins', 'redFirstBlood', 'redFirstTower', 'redFirstBaron', 'redFirstDragon', 'redFirstInhibitor', 'redDragonKills', 'redBaronKills', 'redTowerKills', 'redInhibitorKills', 'redWardPlaced', 'redWardkills', 'redKills', 'redDeath', 'redAssist', 'redChampionDamageDealt', 'redTotalGold', 'redTotalMinionKills', 'redTotalLevel', 'redAvgLevel', 'redJungleMinionKills', 'redKillingSpree', 'redTotalHeal', 'redObjectDamageDealt')]
blue_sample
red_sample
# analysis 1-1 => logistic regression (categorical and numeric value)
reg_blue_result <- glm(blueWins ~ blueFirstBlood+blueFirstTower+blueFirstInhibitor+blueFirstDragon+blueFirstBaron+blueFirstInhibitor+blueDragonKills+blueBaronKills+blueTowerKills+blueInhibitorKills, data=blue_sample, family = "binomial")
summary(reg_blue_result) #except gameDuraton
reg_red_result <- glm(redWins ~ redFirstBlood+redFirstTower+redFirstInhibitor+redFirstDragon+redFirstBaron+redFirstInhibitor+redDragonKills+redBaronKills+redTowerKills+redInhibitorKills, data=red_sample, family = "binomial")
summary(reg_red_result) # except gameDuraton
step(reg_blue_result, direction = "backward")
step(reg_red_result)
# setting directory
setwd('/Users/jinyuntae/Desktop/Team_project/industrial_statistics_university_project')
df = read.csv('data/Challenger_Ranked_Games.csv', header = T)
df = data.frame(df)
df
# select sample of df
temp_sample_num = sample(nrow(df), 300)
temp_sample_num
sample_df = df[temp_sample_num,]
sample_df
# separate blue and red team
blue_sample = sample_df[c('gameId', 'gameDuraton', 'blueWins', 'blueFirstBlood', 'blueFirstTower', 'blueFirstBaron', 'blueFirstDragon', 'blueFirstInhibitor', 'blueDragonKills', 'blueBaronKills', 'blueTowerKills', 'blueInhibitorKills', 'blueWardPlaced', 'blueWardkills', 'blueKills', 'blueDeath', 'blueAssist', 'blueChampionDamageDealt', 'blueTotalGold', 'blueTotalMinionKills', 'blueTotalLevel', 'blueAvgLevel', 'blueJungleMinionKills', 'blueKillingSpree', 'blueTotalHeal', 'blueObjectDamageDealt')]
red_sample = sample_df[c('gameId', 'gameDuraton', 'redWins', 'redFirstBlood', 'redFirstTower', 'redFirstBaron', 'redFirstDragon', 'redFirstInhibitor', 'redDragonKills', 'redBaronKills', 'redTowerKills', 'redInhibitorKills', 'redWardPlaced', 'redWardkills', 'redKills', 'redDeath', 'redAssist', 'redChampionDamageDealt', 'redTotalGold', 'redTotalMinionKills', 'redTotalLevel', 'redAvgLevel', 'redJungleMinionKills', 'redKillingSpree', 'redTotalHeal', 'redObjectDamageDealt')]
blue_sample
red_sample
# analysis 1-1 => logistic regression (categorical and numeric value)
reg_blue_result <- glm(blueWins ~ blueFirstBlood+blueFirstTower+blueFirstInhibitor+blueFirstDragon+blueFirstBaron+blueFirstInhibitor+blueDragonKills+blueBaronKills+blueTowerKills+blueInhibitorKills, data=blue_sample, family = "binomial")
summary(reg_blue_result) #except gameDuraton
reg_red_result <- glm(redWins ~ redFirstBlood+redFirstTower+redFirstInhibitor+redFirstDragon+redFirstBaron+redFirstInhibitor+redDragonKills+redBaronKills+redTowerKills+redInhibitorKills, data=red_sample, family = "binomial")
summary(reg_red_result) # except gameDuraton
step(reg_blue_result, direction = "backward")
step(reg_red_result)
# setting directory
setwd('/Users/jinyuntae/Desktop/Team_project/industrial_statistics_university_project')
df = read.csv('data/Challenger_Ranked_Games.csv', header = T)
df = data.frame(df)
df
# select sample of df
temp_sample_num = sample(nrow(df), 200)
temp_sample_num
sample_df = df[temp_sample_num,]
sample_df
# separate blue and red team
blue_sample = sample_df[c('gameId', 'gameDuraton', 'blueWins', 'blueFirstBlood', 'blueFirstTower', 'blueFirstBaron', 'blueFirstDragon', 'blueFirstInhibitor', 'blueDragonKills', 'blueBaronKills', 'blueTowerKills', 'blueInhibitorKills', 'blueWardPlaced', 'blueWardkills', 'blueKills', 'blueDeath', 'blueAssist', 'blueChampionDamageDealt', 'blueTotalGold', 'blueTotalMinionKills', 'blueTotalLevel', 'blueAvgLevel', 'blueJungleMinionKills', 'blueKillingSpree', 'blueTotalHeal', 'blueObjectDamageDealt')]
red_sample = sample_df[c('gameId', 'gameDuraton', 'redWins', 'redFirstBlood', 'redFirstTower', 'redFirstBaron', 'redFirstDragon', 'redFirstInhibitor', 'redDragonKills', 'redBaronKills', 'redTowerKills', 'redInhibitorKills', 'redWardPlaced', 'redWardkills', 'redKills', 'redDeath', 'redAssist', 'redChampionDamageDealt', 'redTotalGold', 'redTotalMinionKills', 'redTotalLevel', 'redAvgLevel', 'redJungleMinionKills', 'redKillingSpree', 'redTotalHeal', 'redObjectDamageDealt')]
blue_sample
red_sample
# analysis 1-1 => logistic regression (categorical and numeric value)
reg_blue_result <- glm(blueWins ~ blueFirstBlood+blueFirstTower+blueFirstInhibitor+blueFirstDragon+blueFirstBaron+blueFirstInhibitor+blueDragonKills+blueBaronKills+blueTowerKills+blueInhibitorKills, data=blue_sample, family = "binomial")
summary(reg_blue_result) #except gameDuraton
reg_red_result <- glm(redWins ~ redFirstBlood+redFirstTower+redFirstInhibitor+redFirstDragon+redFirstBaron+redFirstInhibitor+redDragonKills+redBaronKills+redTowerKills+redInhibitorKills, data=red_sample, family = "binomial")
summary(reg_red_result) # except gameDuraton
step(reg_blue_result, direction = "backward")
step(reg_red_result)
